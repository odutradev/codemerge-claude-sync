# Code Merge Output
Generated at: 2025-10-06T13:20:29.539Z
Source path: .
Files processed: 6
Total lines: 760
Total characters: 25555

File types:
  - js: 3 files (624 lines)
  - md: 2 files (101 lines)
  - json: 1 files (35 lines)

Project structure & file index:
./
  - background.js (85 lines)
  - content.js (497 lines)
  - ICONS.md (18 lines)
  - manifest.json (35 lines)
  - popup.js (42 lines)
  - README.md (83 lines)
================================================================================

STARTOFFILE: background.js
----------------------------------------
// Background Service Worker - COM SUPORTE A FETCH SEM CORS
let config = {
    serverUrl: 'http://localhost:9876',
    projectName: '',
    updateInterval: 5000,
    autoUpdate: false
};

// Carregar configuração
chrome.runtime.onInstalled.addListener(() => {
    chrome.storage.local.get(['config'], (result) => {
        if (result.config) {
            config = { ...config, ...result.config };
        }
    });
});

// Mensagens do content script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'GET_CONFIG') {
        sendResponse({ config });
    } 
    else if (message.type === 'UPDATE_CONFIG') {
        config = { ...config, ...message.config };
        chrome.storage.local.set({ config });
        sendResponse({ success: true });
    } 
    else if (message.type === 'FETCH_URL') {
        // Nova funcionalidade: fazer fetch sem restrições CORS
        const { url, options } = message;
        
        fetch(url, options || {})
            .then(response => {
                const status = response.status;
                const statusText = response.statusText;
                
                // Verificar content-type para decidir como processar
                const contentType = response.headers.get('content-type') || '';
                
                if (!response.ok) {
                    sendResponse({ 
                        success: false, 
                        error: `HTTP ${status}`,
                        status: status
                    });
                    return;
                }
                
                // Se for JSON, retornar como JSON
                if (contentType.includes('application/json')) {
                    return response.json().then(data => {
                        sendResponse({ 
                            success: true, 
                            data: JSON.stringify(data),
                            contentType: 'json',
                            status: status
                        });
                    });
                }
                
                // Caso contrário, retornar como texto
                return response.text().then(data => {
                    sendResponse({ 
                        success: true, 
                        data: data,
                        contentType: 'text',
                        status: status
                    });
                });
            })
            .catch(error => {
                sendResponse({ 
                    success: false, 
                    error: error.message,
                    status: 0
                });
            });
        
        return true; // Mantém o canal aberto para resposta assíncrona
    }
    
    return true;
});

console.log('CodeMerge Claude Sync - Background worker iniciado (CORS bypass enabled)');
----------------------------------------
ENDOFFILE: background.js

STARTOFFILE: content.js
----------------------------------------
// Content Script - CodeMerge Claude Sync (COM CORS BYPASS)

class CodeMergeClaudeSync {
    constructor() {
        this.config = {
            serverUrl: 'http://localhost:9876',
            projectName: '',
            updateInterval: 5000,
            autoUpdate: false
        };
        
        this.isRunning = false;
        this.updateIntervalId = null;
        this.lastContent = null;
        this.lastHash = null;
        this.serverStatus = 'disconnected';
        this.availableProjectFiles = [];
        
        this.init();
    }
    
    async init() {
        await this.loadConfig();
        this.createUI();
        this.setupFileListObserver();
        this.discoverProjectFiles();
        console.log('🚀 CodeMerge Claude Sync iniciado (CORS bypass enabled)');
    }
    
    async loadConfig() {
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({ type: 'GET_CONFIG' }, (response) => {
                if (response && response.config) {
                    this.config = { ...this.config, ...response.config };
                }
                resolve();
            });
        });
    }
    
    async saveConfig() {
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({ 
                type: 'UPDATE_CONFIG', 
                config: this.config 
            }, (response) => {
                resolve(response);
            });
        });
    }
    
    // Helper: fazer fetch via background worker (sem CORS)
    async fetchViaBackground(url, options = {}) {
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({
                type: 'FETCH_URL',
                url: url,
                options: options
            }, (response) => {
                resolve(response);
            });
        });
    }
    
    createUI() {
        const container = document.createElement('div');
        container.id = 'codemerge-sync-widget';
        container.innerHTML = `
            <div class="cms-header">
                <h3>📄 CodeMerge Sync</h3>
                <button id="cms-toggle">−</button>
            </div>
            
            <div id="cms-content">
                <!-- Configuração do Servidor -->
                <div class="cms-section">
                    <label class="cms-label">🌐 Servidor CodeMerge:</label>
                    <input 
                        id="cms-server-url" 
                        type="text" 
                        value="${this.config.serverUrl}"
                        placeholder="http://localhost:9876"
                        class="cms-input"
                    />
                    <button id="cms-test-connection" class="cms-button cms-button-secondary">
                        🔌 Testar Conexão
                    </button>
                    <div id="cms-server-status" class="cms-status-badge">⚪ Desconectado</div>
                </div>
                
                <!-- Nome do Projeto -->
                <div class="cms-section">
                    <label class="cms-label">📦 Nome do Projeto:</label>
                    <input 
                        id="cms-project-name" 
                        type="text" 
                        value="${this.config.projectName}"
                        placeholder="Digite o nome do projeto"
                        class="cms-input"
                    />
                    <div class="cms-hint">Nome retornado pelo endpoint /health</div>
                </div>
                
                <!-- Intervalo de Atualização -->
                <div class="cms-section">
                    <label class="cms-label">⏱️ Intervalo (segundos):</label>
                    <input 
                        id="cms-interval" 
                        type="number" 
                        min="2" 
                        max="300" 
                        value="${this.config.updateInterval / 1000}"
                        class="cms-input"
                    />
                </div>
                
                <!-- Status do Projeto Claude -->
                <div class="cms-section">
                    <label class="cms-label">🎯 Status do Projeto:</label>
                    <div id="cms-project-status" class="cms-info-box">
                        <div id="cms-project-file-count">Descobrindo arquivos...</div>
                        <div id="cms-project-file-match"></div>
                    </div>
                </div>
                
                <!-- Controles -->
                <div class="cms-controls">
                    <button id="cms-sync-now" class="cms-button cms-button-primary" disabled>
                        🚀 Sincronizar Agora
                    </button>
                    <button id="cms-toggle-auto" class="cms-button cms-button-toggle">
                        ⏰ Auto: OFF
                    </button>
                </div>
                
                <!-- Status Geral -->
                <div id="cms-status" class="cms-status">
                    Configure o servidor e nome do projeto para começar
                </div>
                
                <!-- Info -->
                <div class="cms-info">
                    <strong>Funcionamento:</strong> A extensão busca código do CodeMerge 
                    via HTTP e faz UPSERT automático no Claude Project.
                    <br><small>🔓 CORS bypass via background worker</small>
                </div>
            </div>
        `;
        
        document.body.appendChild(container);
        this.attachEventListeners();
    }
    
    attachEventListeners() {
        // Toggle widget
        document.getElementById('cms-toggle').onclick = () => {
            const content = document.getElementById('cms-content');
            const button = document.getElementById('cms-toggle');
            if (content.style.display === 'none') {
                content.style.display = 'block';
                button.textContent = '−';
            } else {
                content.style.display = 'none';
                button.textContent = '+';
            }
        };
        
        // Server URL
        document.getElementById('cms-server-url').onchange = (e) => {
            this.config.serverUrl = e.target.value.trim();
            this.saveConfig();
        };
        
        // Project Name
        document.getElementById('cms-project-name').onchange = (e) => {
            this.config.projectName = e.target.value.trim();
            this.saveConfig();
            this.updateProjectStatus();
            this.checkCanSync();
        };
        
        // Interval
        document.getElementById('cms-interval').onchange = (e) => {
            this.config.updateInterval = parseInt(e.target.value) * 1000;
            this.saveConfig();
            if (this.isRunning) {
                this.stopAutoUpdate();
                this.startAutoUpdate();
            }
        };
        
        // Test Connection
        document.getElementById('cms-test-connection').onclick = () => {
            this.testConnection();
        };
        
        // Sync Now
        document.getElementById('cms-sync-now').onclick = () => {
            this.syncNow();
        };
        
        // Toggle Auto
        document.getElementById('cms-toggle-auto').onclick = () => {
            this.toggleAutoUpdate();
        };
    }
    
    async testConnection() {
        this.updateStatus('Testando conexão...', 'loading');
        
        try {
            // Usar background worker para evitar CORS
            const healthResponse = await this.fetchViaBackground(
                `${this.config.serverUrl}/health`,
                { method: 'GET' }
            );
            
            if (!healthResponse.success) {
                throw new Error(healthResponse.error || 'Erro desconhecido');
            }
            
            const data = JSON.parse(healthResponse.data);
            this.serverStatus = 'connected';
            
            // Atualizar nome do projeto se não estiver definido
            if (!this.config.projectName && data.project) {
                this.config.projectName = data.project;
                document.getElementById('cms-project-name').value = data.project;
                await this.saveConfig();
            }
            
            this.updateServerStatus('connected', data);
            this.updateStatus(`✅ Conectado! Projeto: ${data.project}`, 'success');
            this.checkCanSync();
            
        } catch (error) {
            this.serverStatus = 'error';
            this.updateServerStatus('error');
            this.updateStatus(`❌ Erro: ${error.message}`, 'error');
        }
    }
    
    updateServerStatus(status, data = null) {
        const badge = document.getElementById('cms-server-status');
        
        if (status === 'connected') {
            badge.textContent = `🟢 Conectado`;
            badge.style.background = '#28a74520';
            badge.style.borderLeft = '3px solid #28a745';
            
            if (data) {
                badge.title = `Projeto: ${data.project}\nEndpoint: ${data.endpoint}\nMerge Ready: ${data.mergeReady}`;
            }
        } else if (status === 'error') {
            badge.textContent = `🔴 Erro`;
            badge.style.background = '#dc354520';
            badge.style.borderLeft = '3px solid #dc3545';
        } else {
            badge.textContent = `⚪ Desconectado`;
            badge.style.background = '#6c757d20';
            badge.style.borderLeft = '3px solid #6c757d';
        }
    }
    
    discoverProjectFiles() {
        this.availableProjectFiles = [];
        
        const fileThumbnails = document.querySelectorAll('[data-testid="file-thumbnail"]');
        
        fileThumbnails.forEach((thumbnail) => {
            const nameElement = thumbnail.querySelector('h3');
            const linesElement = thumbnail.querySelector('p');
            const deleteButton = thumbnail.querySelector('button[data-state="closed"]:last-child');
            
            if (nameElement && linesElement) {
                this.availableProjectFiles.push({
                    name: nameElement.textContent.trim(),
                    lines: linesElement.textContent.trim(),
                    element: thumbnail,
                    deleteButton: deleteButton
                });
            }
        });
        
        this.updateProjectStatus();
    }
    
    updateProjectStatus() {
        const countElement = document.getElementById('cms-project-file-count');
        const matchElement = document.getElementById('cms-project-file-match');
        
        countElement.textContent = `📁 ${this.availableProjectFiles.length} arquivo(s) no projeto`;
        
        if (this.config.projectName) {
            const fileName = `${this.config.projectName}-merged.txt`;
            const existingFile = this.availableProjectFiles.find(f => f.name === fileName);
            
            if (existingFile) {
                matchElement.textContent = `📄 "${fileName}" será SUBSTITUÍDO (${existingFile.lines})`;
                matchElement.style.color = '#ffc107';
            } else {
                matchElement.textContent = `➕ "${fileName}" será ADICIONADO como novo arquivo`;
                matchElement.style.color = '#28a745';
            }
        } else {
            matchElement.textContent = 'Configure o nome do projeto';
            matchElement.style.color = '#6c757d';
        }
    }
    
    checkCanSync() {
        const canSync = this.config.serverUrl && this.config.projectName;
        document.getElementById('cms-sync-now').disabled = !canSync;
        document.getElementById('cms-toggle-auto').disabled = !canSync;
    }
    
    async syncNow() {
        if (!this.config.serverUrl || !this.config.projectName) {
            this.updateStatus('Configure servidor e nome do projeto', 'error');
            return;
        }
        
        try {
            this.updateStatus('Buscando código do CodeMerge...', 'loading');
            
            // Usar background worker para evitar CORS
            const fetchResponse = await this.fetchViaBackground(
                `${this.config.serverUrl}/${this.config.projectName}`,
                { method: 'GET' }
            );
            
            if (!fetchResponse.success) {
                if (fetchResponse.status === 503) {
                    throw new Error('Merge ainda não está pronto no servidor');
                }
                throw new Error(fetchResponse.error || 'Erro na requisição');
            }
            
            const content = fetchResponse.data;
            const contentHash = this.hashCode(content);
            
            // Verificar se conteúdo mudou
            if (contentHash === this.lastHash) {
                this.updateStatus('✅ Conteúdo já está atualizado', 'success');
                return;
            }
            
            // Atualizar arquivos do projeto
            this.discoverProjectFiles();
            
            const fileName = `${this.config.projectName}-merged.txt`;
            const existingFile = this.availableProjectFiles.find(f => f.name === fileName);
            
            // Remover arquivo existente se necessário
            if (existingFile) {
                this.updateStatus(`Removendo "${fileName}" existente...`, 'loading');
                await this.removeFile(existingFile);
                await this.wait(1000);
            }
            
            // Adicionar novo arquivo
            this.updateStatus(`Adicionando novo "${fileName}"...`, 'loading');
            await this.addFile(fileName, content);
            
            this.lastContent = content;
            this.lastHash = contentHash;
            
            this.updateStatus(`✅ Sincronizado! ${new Date().toLocaleTimeString('pt-BR')}`, 'success');
            
            setTimeout(() => this.discoverProjectFiles(), 1500);
            
        } catch (error) {
            console.error('Erro na sincronização:', error);
            this.updateStatus(`❌ Erro: ${error.message}`, 'error');
        }
    }
    
    async removeFile(fileInfo) {
        if (!fileInfo.deleteButton) {
            throw new Error('Botão de deletar não encontrado');
        }
        
        fileInfo.deleteButton.click();
        await this.wait(500);
        
        // Procurar confirmação
        const confirmButtons = document.querySelectorAll('button');
        for (const button of confirmButtons) {
            const text = button.textContent.toLowerCase();
            if (text.includes('excluir') || text.includes('delete') || 
                text.includes('remover') || text.includes('confirmar')) {
                button.click();
                break;
            }
        }
    }
    
    async addFile(fileName, content) {
        const uploadInput = document.querySelector('input[data-testid="project-doc-upload"]');
        
        if (!uploadInput) {
            throw new Error('Input de upload não encontrado');
        }
        
        const fileBlob = new File([content], fileName, {
            type: 'text/plain',
            lastModified: Date.now()
        });
        
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(fileBlob);
        uploadInput.files = dataTransfer.files;
        
        const changeEvent = new Event('change', { bubbles: true });
        uploadInput.dispatchEvent(changeEvent);
    }
    
    toggleAutoUpdate() {
        if (this.isRunning) {
            this.stopAutoUpdate();
        } else {
            this.startAutoUpdate();
        }
    }
    
    startAutoUpdate() {
        this.isRunning = true;
        this.updateIntervalId = setInterval(() => {
            this.syncNow();
        }, this.config.updateInterval);
        
        const button = document.getElementById('cms-toggle-auto');
        button.textContent = '⏰ Auto: ON';
        button.classList.add('active');
        
        this.updateStatus(`Auto-sync ativado (${this.config.updateInterval / 1000}s)`, 'success');
        
        // Primeira sincronização imediata
        this.syncNow();
    }
    
    stopAutoUpdate() {
        this.isRunning = false;
        if (this.updateIntervalId) {
            clearInterval(this.updateIntervalId);
            this.updateIntervalId = null;
        }
        
        const button = document.getElementById('cms-toggle-auto');
        button.textContent = '⏰ Auto: OFF';
        button.classList.remove('active');
        
        this.updateStatus('Auto-sync desativado', 'info');
    }
    
    setupFileListObserver() {
        const observer = new MutationObserver(() => {
            setTimeout(() => {
                this.discoverProjectFiles();
            }, 800);
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }
    
    updateStatus(message, type = 'info') {
        const status = document.getElementById('cms-status');
        status.textContent = message;
        status.className = `cms-status cms-status-${type}`;
    }
    
    hashCode(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash;
    }
    
    wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Inicializar quando a página carregar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        new CodeMergeClaudeSync();
    });
} else {
    new CodeMergeClaudeSync();
}
----------------------------------------
ENDOFFILE: content.js

STARTOFFILE: ICONS.md
----------------------------------------
# Gerando Ícones

Esta extensão precisa de ícones PNG nos tamanhos 16x16, 48x48 e 128x128.

## Opção 1: Usar icon.svg como base
Abra icon.svg em um editor de imagens e exporte nos tamanhos necessários.

## Opção 2: Criar ícones personalizados
Crie imagens PNG com:
- icon16.png (16x16)
- icon48.png (48x48)
- icon128.png (128x128)

## Opção 3: Usar ferramenta online
Use https://www.favicon-generator.org/ para gerar todos os tamanhos.

Salve os arquivos com os nomes corretos na pasta da extensão.

----------------------------------------
ENDOFFILE: ICONS.md

STARTOFFILE: manifest.json
----------------------------------------
{
  "manifest_version": 3,
  "name": "CodeMerge Claude Sync",
  "version": "1.0.0",
  "description": "Sincroniza automaticamente código do CodeMerge com Claude Projects",
  "permissions": [
    "storage",
    "activeTab"
  ],
  "host_permissions": [
    "https://claude.ai/*",
    "http://localhost:*/*",
    "http://127.0.0.1:*/*"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [
    {
      "matches": [
        "https://claude.ai/*"
      ],
      "js": [
        "content.js"
      ],
      "css": [
        "styles.css"
      ],
      "run_at": "document_idle"
    }
  ],
  "action": {
    "default_popup": "popup.html"
  }
}
----------------------------------------
ENDOFFILE: manifest.json

STARTOFFILE: popup.js
----------------------------------------
// Popup Script'knjknekjnfdskjnksd
document.addEventListener('DOMContentLoaded', async () => {
    const serverUrlInput = document.getElementById('serverUrl');
    const projectNameInput = document.getElementById('projectName');
    const intervalInput = document.getElementById('interval');
    const saveButton = document.getElementById('saveConfig');
    const statusDiv = document.getElementById('status');
    
    // Carregar configuração atual
    chrome.runtime.sendMessage({ type: 'GET_CONFIG' }, (response) => {
        if (response && response.config) {
            serverUrlInput.value = response.config.serverUrl || 'http://localhost:9876';
            projectNameInput.value = response.config.projectName || '';
            intervalInput.value = response.config.updateInterval / 1000 || 5;
        }
    });
    
    // Salvar configuração
    saveButton.onclick = () => {
        const config = {
            serverUrl: serverUrlInput.value.trim(),
            projectName: projectNameInput.value.trim(),
            updateInterval: parseInt(intervalInput.value) * 1000
        };
        
        chrome.runtime.sendMessage({ 
            type: 'UPDATE_CONFIG', 
            config 
        }, (response) => {
            if (response && response.success) {
                statusDiv.textContent = '✅ Configuração salva!';
                statusDiv.style.color = '#28a745';
                
                setTimeout(() => {
                    statusDiv.textContent = 'Configure e acesse claude.ai';
                    statusDiv.style.color = '#888';
                }, 2000);
            }
        });
    };
});

----------------------------------------
ENDOFFILE: popup.js

STARTOFFILE: README.md
----------------------------------------
# CodeMerge Claude Sync

Extensão que sincroniza automaticamente código do CodeMerge com Claude Projects.

## 🚀 Instalação

1. Abra Chrome/Edge e vá para `chrome://extensions/`
2. Ative o "Modo do desenvolvedor"
3. Clique em "Carregar sem compactação"
4. Selecione a pasta `codemerge-claude-sync`

## ⚙️ Configuração

1. Inicie o CodeMerge no modo watch:
   ```bash
   codemerge watch [caminho] --port 9876
   ```

2. Acesse https://claude.ai e vá para um projeto

3. Configure a extensão:
   - **Servidor**: URL do CodeMerge (padrão: http://localhost:9876)
   - **Projeto**: Nome do projeto retornado pelo endpoint /health
   - **Intervalo**: Tempo entre sincronizações (segundos)

4. Clique em "🔌 Testar Conexão" para verificar

5. Use "🚀 Sincronizar Agora" para sincronização manual

6. Ative "⏰ Auto: ON" para sincronização automática

## 📋 Funcionamento

1. A extensão faz polling no servidor CodeMerge
2. Busca o conteúdo mesclado via HTTP
3. Remove arquivo existente no Claude Project (se houver)
4. Adiciona novo arquivo com conteúdo atualizado
5. Processo se repete automaticamente no intervalo configurado

## 🔧 Requisitos

- Chrome 86+ ou Edge 86+
- CodeMerge rodando em modo watch
- Acesso à página do Claude Projects

## 📝 Arquivo Gerado

Nome do arquivo: `{projectName}-merged.txt`

O arquivo contém todo o código mesclado com:
- Metadados do projeto
- Estrutura de diretórios
- Conteúdo de todos os arquivos

## 🛠️ Desenvolvimento

Estrutura da extensão:
- `manifest.json` - Configuração da extensão
- `background.js` - Service worker
- `content.js` - Script injetado no Claude
- `styles.css` - Estilos da interface
- `popup.html/js` - Popup de configuração

## 🐛 Troubleshooting

**Extensão não aparece:**
- Verifique se está em https://claude.ai
- Recarregue a página

**Erro de conexão:**
- Verifique se CodeMerge está rodando
- Confirme a URL do servidor
- Verifique CORS (CodeMerge permite por padrão)

**Arquivo não atualiza:**
- Verifique o nome do projeto
- Confirme que o merge está pronto (/health mergeReady: true)
- Verifique logs do console (F12)

## 📄 Licença

MIT

----------------------------------------
ENDOFFILE: README.md
