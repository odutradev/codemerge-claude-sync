# Code Merge Output
Generated at: 2025-10-06T14:21:56.343Z
Source path: .
Files processed: 6
Total lines: 666
Total characters: 22786

File types:
  - js: 3 files (530 lines)
  - md: 2 files (101 lines)
  - json: 1 files (35 lines)

Project structure & file index:
./
  - background.js (81 lines)
  - content.js (407 lines)
  - ICONS.md (18 lines)
  - manifest.json (35 lines)
  - popup.js (42 lines)
  - README.md (83 lines)
================================================================================

STARTOFFILE: background.js
----------------------------------------
// Background Service Worker - CORS Bypass

let config = {
    serverUrl: 'http://localhost:9876',
    projectName: '',
    updateInterval: 5000
};

// Carregar configura√ß√£o ao instalar
chrome.runtime.onInstalled.addListener(() => {
    chrome.storage.local.get(['config'], (result) => {
        if (result.config) {
            config = { ...config, ...result.config };
        }
    });
});

// Ouvir mensagens do content script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'GET_CONFIG') {
        sendResponse({ config });
    } 
    else if (message.type === 'UPDATE_CONFIG') {
        config = { ...config, ...message.config };
        chrome.storage.local.set({ config });
        sendResponse({ success: true });
    } 
    else if (message.type === 'FETCH_URL') {
        // Fazer fetch sem restri√ß√µes CORS
        const { url, options } = message;
        
        fetch(url, options || {})
            .then(response => {
                const status = response.status;
                const contentType = response.headers.get('content-type') || '';
                
                if (!response.ok) {
                    sendResponse({ 
                        success: false, 
                        error: `HTTP ${status}`,
                        status: status
                    });
                    return;
                }
                
                // Retornar JSON ou texto baseado no content-type
                if (contentType.includes('application/json')) {
                    return response.json().then(data => {
                        sendResponse({ 
                            success: true, 
                            data: JSON.stringify(data),
                            contentType: 'json',
                            status: status
                        });
                    });
                }
                
                return response.text().then(data => {
                    sendResponse({ 
                        success: true, 
                        data: data,
                        contentType: 'text',
                        status: status
                    });
                });
            })
            .catch(error => {
                sendResponse({ 
                    success: false, 
                    error: error.message,
                    status: 0
                });
            });
        
        return true; // Mant√©m canal aberto para resposta ass√≠ncrona
    }
    
    return true;
});

console.log('üöÄ CodeMerge Claude Sync - Background worker iniciado');
----------------------------------------
ENDOFFILE: background.js

STARTOFFILE: content.js
----------------------------------------
// Content Script - CodeMerge Claude Sync (Integrado ao Claude UI)

class CodeMergeClaudeSync {
    constructor() {
        this.config = {
            serverUrl: 'http://localhost:9876',
            projectName: '',
            updateInterval: 5000
        };
        
        this.isRunning = false;
        this.updateIntervalId = null;
        this.lastHash = null;
        this.lastSyncTime = null;
        this.syncStatus = 'idle'; // 'idle', 'syncing', 'success', 'error'
        
        this.init();
    }
    
    async init() {
        await this.loadConfig();
        this.injectUI();
        console.log('üöÄ CodeMerge Claude Sync iniciado');
    }
    
    async loadConfig() {
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({ type: 'GET_CONFIG' }, (response) => {
                if (response?.config) {
                    this.config = { ...this.config, ...response.config };
                }
                resolve();
            });
        });
    }
    
    async saveConfig() {
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({ 
                type: 'UPDATE_CONFIG', 
                config: this.config 
            }, resolve);
        });
    }
    
    async fetchViaBackground(url, options = {}) {
        return new Promise((resolve) => {
            chrome.runtime.sendMessage({
                type: 'FETCH_URL',
                url: url,
                options: options
            }, resolve);
        });
    }
    
    injectUI() {
        // Aguardar o container estar dispon√≠vel
        const checkInterval = setInterval(() => {
            // Procurar pela se√ß√£o de Arquivos dentro do container
            const filesHeader = Array.from(document.querySelectorAll('h3')).find(
                h3 => h3.textContent.trim() === 'Arquivos'
            );
            
            if (filesHeader) {
                clearInterval(checkInterval);
                // Pegar o container pai que cont√©m Instru√ß√µes e Arquivos
                const mainContainer = filesHeader.closest('.border-0\\.5.border-border-300.rounded-2xl');
                if (mainContainer) {
                    this.createIntegratedUI(mainContainer, filesHeader);
                }
            }
        }, 500);
        
        // Timeout de seguran√ßa
        setTimeout(() => clearInterval(checkInterval), 10000);
    }
    
    createIntegratedUI(mainContainer, filesHeader) {
        // Verificar se j√° foi injetado
        if (document.getElementById('cms-sync-section')) return;
        
        // Encontrar o divisor antes da se√ß√£o de arquivos
        const filesSection = filesHeader.closest('.w-full.px-\\[1\\.375rem\\]');
        const dividerBeforeFiles = filesSection?.previousElementSibling;
        
        // Criar a se√ß√£o de sync
        const syncSection = document.createElement('div');
        syncSection.id = 'cms-sync-section';
        
        syncSection.innerHTML = `
            <div class="h-[0.5px] w-full bg-border-300"></div>
            
            <div class="w-full px-[1.375rem] py-4 flex flex-row items-center justify-between gap-4 mt-1">
                <div class="w-full flex flex-col gap-0.5">
                    <div class="h-6 w-full flex flex-row items-center justify-between gap-4">
                        <h3 class="text-text-300 font-base-bold">CodeMerge Sync</h3>
                        <div class="flex flex-row items-center gap-2">
                            <div id="cms-status-indicator" class="w-2 h-2 rounded-full bg-border-300 transition-colors"></div>
                        </div>
                    </div>
                    <p class="text-text-500 font-small line-clamp-2">
                        <span class="opacity-60">Sincroniza√ß√£o autom√°tica com servidor CodeMerge</span>
                    </p>
                </div>
            </div>
            
            <div class="h-[0.5px] w-full bg-border-300"></div>
            
            <div class="w-full px-[1.375rem] py-4 flex flex-col gap-3 mb-1">
                <div class="flex flex-col gap-2">
                    <label class="text-text-300 text-[12px] font-medium">Nome do Projeto</label>
                    <input 
                        id="cms-project-name"
                        type="text" 
                        value="${this.config.projectName}"
                        placeholder="Digite o nome do projeto"
                        class="w-full px-3 py-2 bg-bg-000 border-0.5 border-border-300 rounded-lg text-text-100 text-[14px] focus:outline-none focus:border-border-200 transition-colors"
                    />
                </div>
                
                <div class="flex flex-col gap-2">
                    <label class="text-text-300 text-[12px] font-medium">Intervalo (segundos)</label>
                    <input 
                        id="cms-interval"
                        type="number" 
                        min="2" 
                        max="300" 
                        value="${this.config.updateInterval / 1000}"
                        class="w-full px-3 py-2 bg-bg-000 border-0.5 border-border-300 rounded-lg text-text-100 text-[14px] focus:outline-none focus:border-border-200 transition-colors"
                    />
                </div>
                
                <button 
                    id="cms-toggle-sync"
                    class="inline-flex items-center justify-center relative shrink-0 select-none transition duration-300 font-medium h-9 px-4 rounded-lg bg-bg-300 hover:bg-bg-400 text-text-100 border-0.5 border-border-300 disabled:opacity-50 disabled:pointer-events-none"
                >
                    <span id="cms-button-text">Iniciar Sincroniza√ß√£o</span>
                </button>
                
                <div class="flex items-center justify-between pt-2 border-t-0.5 border-border-300">
                    <div class="flex flex-col gap-0.5">
                        <span class="text-text-500 text-[11px]">Status</span>
                        <span id="cms-status-text" class="text-text-300 text-[12px] font-medium">Aguardando in√≠cio</span>
                    </div>
                    <div class="flex flex-col gap-0.5 text-right">
                        <span class="text-text-500 text-[11px]">√öltima sync</span>
                        <span id="cms-last-sync" class="text-text-300 text-[12px] font-medium">--:--</span>
                    </div>
                </div>
            </div>
        `;
        
        // Inserir antes do divisor da se√ß√£o de arquivos
        if (dividerBeforeFiles) {
            mainContainer.insertBefore(syncSection, dividerBeforeFiles);
        } else {
            // Fallback: inserir antes da se√ß√£o de arquivos
            mainContainer.insertBefore(syncSection, filesSection);
        }
        
        this.attachEventListeners();
        this.updateUIState();
    }
    
    attachEventListeners() {
        const projectInput = document.getElementById('cms-project-name');
        const intervalInput = document.getElementById('cms-interval');
        const toggleButton = document.getElementById('cms-toggle-sync');
        
        projectInput?.addEventListener('change', (e) => {
            this.config.projectName = e.target.value.trim();
            this.saveConfig();
        });
        
        intervalInput?.addEventListener('change', (e) => {
            this.config.updateInterval = parseInt(e.target.value) * 1000;
            this.saveConfig();
            if (this.isRunning) {
                this.stopSync();
                this.startSync();
            }
        });
        
        toggleButton?.addEventListener('click', () => {
            if (this.isRunning) {
                this.stopSync();
            } else {
                this.startSync();
            }
        });
    }
    
    updateUIState() {
        const indicator = document.getElementById('cms-status-indicator');
        const buttonText = document.getElementById('cms-button-text');
        const statusText = document.getElementById('cms-status-text');
        const lastSync = document.getElementById('cms-last-sync');
        const toggleButton = document.getElementById('cms-toggle-sync');
        
        if (!indicator || !buttonText || !statusText) return;
        
        // Atualizar indicador de status
        if (this.syncStatus === 'success') {
            indicator.className = 'w-2 h-2 rounded-full bg-green-500 transition-colors';
        } else if (this.syncStatus === 'syncing') {
            indicator.className = 'w-2 h-2 rounded-full bg-yellow-500 transition-colors animate-pulse';
        } else if (this.syncStatus === 'error') {
            indicator.className = 'w-2 h-2 rounded-full bg-red-500 transition-colors';
        } else {
            indicator.className = 'w-2 h-2 rounded-full bg-border-300 transition-colors';
        }
        
        // Atualizar bot√£o
        if (this.isRunning) {
            buttonText.textContent = 'Parar Sincroniza√ß√£o';
            toggleButton.classList.remove('bg-bg-300', 'hover:bg-bg-400');
            toggleButton.classList.add('bg-accent-secondary-100', 'hover:bg-accent-secondary-200');
        } else {
            buttonText.textContent = 'Iniciar Sincroniza√ß√£o';
            toggleButton.classList.remove('bg-accent-secondary-100', 'hover:bg-accent-secondary-200');
            toggleButton.classList.add('bg-bg-300', 'hover:bg-bg-400');
        }
        
        // Atualizar texto de status
        if (this.syncStatus === 'syncing') {
            statusText.textContent = 'Sincronizando...';
        } else if (this.syncStatus === 'success') {
            statusText.textContent = 'Sincronizado';
        } else if (this.syncStatus === 'error') {
            statusText.textContent = 'Erro na sincroniza√ß√£o';
        } else if (this.isRunning) {
            statusText.textContent = 'Aguardando pr√≥xima sync';
        } else {
            statusText.textContent = 'Aguardando in√≠cio';
        }
        
        // Atualizar √∫ltima sync
        if (lastSync && this.lastSyncTime) {
            lastSync.textContent = this.lastSyncTime;
        }
    }
    
    startSync() {
        if (!this.config.projectName) {
            alert('Configure o nome do projeto antes de iniciar');
            return;
        }
        
        this.isRunning = true;
        this.syncStatus = 'idle';
        this.updateUIState();
        
        // Primeira sincroniza√ß√£o imediata
        this.performSync();
        
        // Configurar intervalo
        this.updateIntervalId = setInterval(() => {
            this.performSync();
        }, this.config.updateInterval);
    }
    
    stopSync() {
        this.isRunning = false;
        this.syncStatus = 'idle';
        if (this.updateIntervalId) {
            clearInterval(this.updateIntervalId);
            this.updateIntervalId = null;
        }
        this.updateUIState();
    }
    
    async performSync() {
        if (!this.config.projectName) return;
        
        try {
            this.syncStatus = 'syncing';
            this.updateUIState();
            
            // Buscar conte√∫do do servidor
            const response = await this.fetchViaBackground(
                `${this.config.serverUrl}/${this.config.projectName}`
            );
            
            if (!response.success) {
                throw new Error(response.error || 'Erro ao buscar conte√∫do');
            }
            
            const content = response.data;
            const contentHash = this.hashCode(content);
            
            // Verificar se mudou
            if (contentHash === this.lastHash) {
                this.syncStatus = 'success';
                this.updateUIState();
                return;
            }
            
            // Atualizar arquivo no Claude
            const fileName = `${this.config.projectName}-merged.txt`;
            await this.updateClaudeFile(fileName, content);
            
            this.lastHash = contentHash;
            this.lastSyncTime = new Date().toLocaleTimeString('pt-BR', { 
                hour: '2-digit', 
                minute: '2-digit' 
            });
            this.syncStatus = 'success';
            
        } catch (error) {
            console.error('Erro na sincroniza√ß√£o:', error);
            this.syncStatus = 'error';
        }
        
        this.updateUIState();
    }
    
    async updateClaudeFile(fileName, content) {
        // Procurar arquivo existente
        const existingFile = await this.findExistingFile(fileName);
        
        // Remover se existir
        if (existingFile) {
            await this.removeFile(existingFile);
            await this.wait(1000);
        }
        
        // Adicionar novo arquivo
        await this.addFile(fileName, content);
        await this.wait(500);
    }
    
    async findExistingFile(fileName) {
        const thumbnails = document.querySelectorAll('[data-testid="file-thumbnail"]');
        
        for (const thumbnail of thumbnails) {
            const nameElement = thumbnail.querySelector('h3');
            if (nameElement?.textContent.trim() === fileName) {
                const deleteButton = thumbnail.querySelector('button[data-state="closed"]:last-child');
                return { element: thumbnail, deleteButton };
            }
        }
        
        return null;
    }
    
    async removeFile(fileInfo) {
        if (!fileInfo.deleteButton) {
            throw new Error('Bot√£o de deletar n√£o encontrado');
        }
        
        fileInfo.deleteButton.click();
        await this.wait(500);
        
        // Confirmar exclus√£o
        const confirmButtons = document.querySelectorAll('button');
        for (const button of confirmButtons) {
            const text = button.textContent.toLowerCase();
            if (text.includes('excluir') || text.includes('delete')) {
                button.click();
                break;
            }
        }
    }
    
    async addFile(fileName, content) {
        const uploadInput = document.querySelector('input[data-testid="project-doc-upload"]');
        
        if (!uploadInput) {
            throw new Error('Input de upload n√£o encontrado');
        }
        
        const fileBlob = new File([content], fileName, {
            type: 'text/plain',
            lastModified: Date.now()
        });
        
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(fileBlob);
        uploadInput.files = dataTransfer.files;
        
        const changeEvent = new Event('change', { bubbles: true });
        uploadInput.dispatchEvent(changeEvent);
    }
    
    hashCode(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return hash;
    }
    
    wait(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// Inicializar
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        new CodeMergeClaudeSync();
    });
} else {
    new CodeMergeClaudeSync();
}
----------------------------------------
ENDOFFILE: content.js

STARTOFFILE: ICONS.md
----------------------------------------
# Gerando √çcones

Esta extens√£o precisa de √≠cones PNG nos tamanhos 16x16, 48x48 e 128x128.

## Op√ß√£o 1: Usar icon.svg como base
Abra icon.svg em um editor de imagens e exporte nos tamanhos necess√°rios.

## Op√ß√£o 2: Criar √≠cones personalizados
Crie imagens PNG com:
- icon16.png (16x16)
- icon48.png (48x48)
- icon128.png (128x128)

## Op√ß√£o 3: Usar ferramenta online
Use https://www.favicon-generator.org/ para gerar todos os tamanhos.

Salve os arquivos com os nomes corretos na pasta da extens√£o.

----------------------------------------
ENDOFFILE: ICONS.md

STARTOFFILE: manifest.json
----------------------------------------
{
  "manifest_version": 3,
  "name": "CodeMerge Claude Sync",
  "version": "1.0.0",
  "description": "Sincroniza automaticamente c√≥digo do CodeMerge com Claude Projects",
  "permissions": [
    "storage",
    "activeTab"
  ],
  "host_permissions": [
    "https://claude.ai/*",
    "http://localhost:*/*",
    "http://127.0.0.1:*/*"
  ],
  "background": {
    "service_worker": "background.js"
  },
  "content_scripts": [
    {
      "matches": [
        "https://claude.ai/*"
      ],
      "js": [
        "content.js"
      ],
      "css": [
        "styles.css"
      ],
      "run_at": "document_idle"
    }
  ],
  "action": {
    "default_popup": "popup.html"
  }
}
----------------------------------------
ENDOFFILE: manifest.json

STARTOFFILE: popup.js
----------------------------------------
// Popup Script'knjknekjnfdskjnksd
document.addEventListener('DOMContentLoaded', async () => {
    const serverUrlInput = document.getElementById('serverUrl');
    const projectNameInput = document.getElementById('projectName');
    const intervalInput = document.getElementById('interval');
    const saveButton = document.getElementById('saveConfig');
    const statusDiv = document.getElementById('status');
    
    // Carregar configura√ß√£o atual
    chrome.runtime.sendMessage({ type: 'GET_CONFIG' }, (response) => {
        if (response && response.config) {
            serverUrlInput.value = response.config.serverUrl || 'http://localhost:9876';
            projectNameInput.value = response.config.projectName || '';
            intervalInput.value = response.config.updateInterval / 1000 || 5;
        }
    });
    
    // Salvar configura√ß√£o
    saveButton.onclick = () => {
        const config = {
            serverUrl: serverUrlInput.value.trim(),
            projectName: projectNameInput.value.trim(),
            updateInterval: parseInt(intervalInput.value) * 1000
        };
        
        chrome.runtime.sendMessage({ 
            type: 'UPDATE_CONFIG', 
            config 
        }, (response) => {
            if (response && response.success) {
                statusDiv.textContent = '‚úÖ Configura√ß√£o salva!';
                statusDiv.style.color = '#28a745';
                
                setTimeout(() => {
                    statusDiv.textContent = 'Configure e acesse claude.ai';
                    statusDiv.style.color = '#888';
                }, 2000);
            }
        });
    };
});

----------------------------------------
ENDOFFILE: popup.js

STARTOFFILE: README.md
----------------------------------------
# CodeMerge Claude Sync

Extens√£o que sincroniza automaticamente c√≥digo do CodeMerge com Claude Projects.

## üöÄ Instala√ß√£o

1. Abra Chrome/Edge e v√° para `chrome://extensions/`
2. Ative o "Modo do desenvolvedor"
3. Clique em "Carregar sem compacta√ß√£o"
4. Selecione a pasta `codemerge-claude-sync`

## ‚öôÔ∏è Configura√ß√£o

1. Inicie o CodeMerge no modo watch:
   ```bash
   codemerge watch [caminho] --port 9876
   ```

2. Acesse https://claude.ai e v√° para um projeto

3. Configure a extens√£o:
   - **Servidor**: URL do CodeMerge (padr√£o: http://localhost:9876)
   - **Projeto**: Nome do projeto retornado pelo endpoint /health
   - **Intervalo**: Tempo entre sincroniza√ß√µes (segundos)

4. Clique em "üîå Testar Conex√£o" para verificar

5. Use "üöÄ Sincronizar Agora" para sincroniza√ß√£o manual

6. Ative "‚è∞ Auto: ON" para sincroniza√ß√£o autom√°tica

## üìã Funcionamento

1. A extens√£o faz polling no servidor CodeMerge
2. Busca o conte√∫do mesclado via HTTP
3. Remove arquivo existente no Claude Project (se houver)
4. Adiciona novo arquivo com conte√∫do atualizado
5. Processo se repete automaticamente no intervalo configurado

## üîß Requisitos

- Chrome 86+ ou Edge 86+
- CodeMerge rodando em modo watch
- Acesso √† p√°gina do Claude Projects

## üìù Arquivo Gerado

Nome do arquivo: `{projectName}-merged.txt`

O arquivo cont√©m todo o c√≥digo mesclado com:
- Metadados do projeto
- Estrutura de diret√≥rios
- Conte√∫do de todos os arquivos

## üõ†Ô∏è Desenvolvimento

Estrutura da extens√£o:
- `manifest.json` - Configura√ß√£o da extens√£o
- `background.js` - Service worker
- `content.js` - Script injetado no Claude
- `styles.css` - Estilos da interface
- `popup.html/js` - Popup de configura√ß√£o

## üêõ Troubleshooting

**Extens√£o n√£o aparece:**
- Verifique se est√° em https://claude.ai
- Recarregue a p√°gina

**Erro de conex√£o:**
- Verifique se CodeMerge est√° rodando
- Confirme a URL do servidor
- Verifique CORS (CodeMerge permite por padr√£o)

**Arquivo n√£o atualiza:**
- Verifique o nome do projeto
- Confirme que o merge est√° pronto (/health mergeReady: true)
- Verifique logs do console (F12)

## üìÑ Licen√ßa

MIT

----------------------------------------
ENDOFFILE: README.md
